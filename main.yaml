---
- hosts: localhost
  gather_facts: no

  vars_files:
    - "vars/creds.yaml"
  # vars:
  #   sites:
  #       - ctrl: ibm_avi_controller_dal
  #         loc: dal
  #       - ctrl: ibm_avi_controller_lon
  #         loc: lon
  tasks:
    # - local_action:
    #   - command: ansible-galaxy install avinetworks.aviconfig --roles-path /etc/ansible/roles
    #   - command: ansible-galaxy install avinetworks.avisdk --roles-path /etc/ansible/roles
    - name: Install Avisdk
      command: python2.7 -m pip install avisdk
    # - name: Install avisdk
    #   pip:
    #     name: avisdk
    - name: Avi Deploy new virtual
      include_role:
        name: avinetworks.aviconfig
      vars:
        cloud_name: "Default-Cloud"
        tenant_name: "admin"
        app_name: "{{ ApplicationName }}"
        app_type: "{{ ApplicationType }}"
        env: "{{ Environment }}"
        department: "{{ Department }}"
        avi_controller: "{% if Environment=='aws' %}{{ aws_avi_controller_1 }}{% elif Environment=='ibm-dallas'%}{{ ibm_avi_controller_dal }}{% elif Environment=='ibm-london'%}{{ ibm_avi_controller_lon }}{% endif %}"
        health_monitor: "{{ HealthMonitor }}"
        listening_port: "{{ ListeningPort }}"
        pool_members: "{{  PoolMembers.split('::') }}"
        avi_config_state: "present"
        avi_username: "{{ aws_tower_username }}"
        avi_password: "{{ aws_tower_password }}"
        api_version: "18.2.8"
        aws_subnet: "{{ aws_network_ref }}"
        tmp_avi_config: "{{ lookup('template','template/vs_create.j2') | from_yaml }}"
        avi_config: "{{tmp_avi_config.avi_config }}"
      when: GslbService == 'No'

    - name: Avi Deploy new virtuals for multi-site GSLB
      include_role:
        name: avinetworks.aviconfig
      vars:
        cloud_name: "Default-Cloud"
        tenant_name: "admin"
        app_name: "{{ ApplicationName }}"
        app_type: "{{ ApplicationType }}"
        env: "{{ Environment }}"
        gslb: "{{ GslbService }}"
        department: "{{ Department }}"
        avi_controller: "{{ item.name }}"
        location: "{{ item.loc }}"
        health_monitor: "{{ HealthMonitor }}"
        listening_port: "{{ ListeningPort }}"
        pool_members: "{{  PoolMembers.split('::') }}"
        avi_config_state: "present"
        avi_username: "{{ aws_tower_username }}"
        avi_password: "{{ aws_tower_password }}"
        api_version: "18.2.8"
        aws_subnet: "{{ aws_network_ref }}"
        tmp_avi_config: "{{ lookup('template','template/vs_create.j2') | from_yaml }}"
        avi_config: "{{tmp_avi_config.avi_config }}"
      when: GslbService == 'Yes' and env == "ibm-"
      loop:
        - { name: ibm_avi_controller_dal, loc: "dal" }
        - { name: ibm_avi_controller_lon, loc: "lon" }



    # - name: Avi Deploy new virtuals for multi-site GSLB
    #   include_role:
    #     name: avinetworks.aviconfig
    #   vars:
    #     cloud_name: "Default-Cloud"
    #     tenant_name: "admin"
    #     app_name: "{{ ApplicationName }}"
    #     app_type: "{{ ApplicationType }}"
    #     env: "{{ Environment }}"
    #     department: "{{ Department }}"
    #     avi_controller: "{{ ibm_avi_controller_gslb_leader }}"
    #     health_monitor: "{{ HealthMonitor }}"
    #     listening_port: "{{ ListeningPort }}"
    #     pool_members: "{{  PoolMembers.split('::') }}"
    #     avi_config_state: "present"
    #     avi_username: "{{ aws_tower_username }}"
    #     avi_password: "{{ aws_tower_password }}"
    #     api_version: "18.2.8"
    #     aws_subnet: "{{ aws_network_ref }}"
    #     tmp_avi_config: "{{ lookup('template','template/vs_create.j2') | from_yaml }}"
    #     avi_config: "{{tmp_avi_config.avi_config }}"
    #   when: "{{ GslbService }}" is 'Yes'